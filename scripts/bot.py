import types
from datetime import datetime

from aiogram import Dispatcher, Bot, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

import scripts.config as cfg
import scripts.database
import scripts.keyboards as kbd

TOKEN = cfg.config['bot_api']
dp = Dispatcher()
db = scripts.database.Database("users.db")
bot = Bot(TOKEN, parse_mode=ParseMode.HTML)


class Form(StatesGroup):
    enter_message_all = State()
    enter_message = State()
    admin = State()
    enter_name = State()
    select_action = State()
    select_time = State()


@dp.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer(
        "–û—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=types.ReplyKeyboardRemove(),
    )


@dp.message(Command("start"))
async def command_start_handler(message: Message) -> None:
    if not db.subscriber_exists(message.from_user.id):
        db.add_subscriber(
            user_id=message.from_user.id,
            username=message.from_user.username,
        )
    await bot.send_message(
        message.from_user.id,
        cfg.config['start_text']
    )


@dp.message(Command("admin"))
async def command_admin(message: Message, state: FSMContext):
    if message.from_user.id in cfg.config['admins']:
        await bot.send_message(
            message.from_user.id,
            "–í—ã –∑–∞—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!üòä",
            reply_markup=kbd.admin_menu_button,
        )
        await state.set_state(Form.admin)
    else:
        await bot.send_message(
            message.from_user.id,
            "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!",
        )


@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", Form.admin)
async def renew_subscription(message: Message, state: FSMContext):
    if message.from_user.id in cfg.config["admins"]:
        await bot.send_message(
            message.from_user.id,
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=kbd.keyboard_cancel,
        )
        await state.set_state(Form.enter_name)


@dp.message(Form.enter_name)
async def enter_username(message: Message, state: FSMContext):
    check_user = db.check_username(message.text)

    if check_user is not False:
        await state.update_data(user_id=check_user[0])
        await state.update_data(username=message.text)
        if check_user[2] is not None:
            date = datetime.strftime(
                datetime.strptime(check_user[2], "%Y-%m-%d %H:%M:%S.%f"), "%d.%m.%Y"
            )
            if datetime.strptime(date, "%d.%m.%Y") > datetime.now():
                await bot.send_message(
                    message.from_user.id,
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {check_user[1]}.\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ {date}.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                    reply_markup=kbd.admin_user_keyboard2,
                )
            else:
                await bot.send_message(
                    message.from_user.id,
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {check_user[1]}.\n–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                    reply_markup=kbd.admin_user_keyboard1,
                )
        else:
            await bot.send_message(
                message.from_user.id,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {check_user[1]}.\n–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                reply_markup=kbd.admin_user_keyboard1,
            )
        await state.set_state(Form.select_action)
    else:
        await bot.send_message(
            message.from_user.id,
            text="–ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ "
                 "id.\n–ü–æ–ª—É—á–∏—Ç—å id –º–æ–∂–Ω–æ —É @username_to_id_bot",
        )


@dp.message(Form.select_action)
async def select_action(message: Message, state: FSMContext):
    if message.text == kbd.button_text_append:
        await bot.send_message(
            message.from_user.id,
            text="–ù–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
            reply_markup=kbd.keyboard_subscribes,
        )
        await state.set_state(Form.select_time)

    elif message.text == kbd.button_text_remove:
        data = await state.get_data()
        db.remove_time(data["user_id"])
        await bot.send_message(
            message.from_user.id,
            text="–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∞",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.clear()


@dp.message(Form.select_time)
async def select_time(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text in cfg.dates:
        db.add_time(data["user_id"], cfg.dates[message.text])
        await bot.send_message(
            message.from_user.id, text=f"–î–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message.text}"
        )
        await bot.send_message(
            data["user_id"],
            text=cfg.format_notification(data["username"], message.text),
        )
    elif message.text == "–í—ã–π—Ç–∏":
        await bot.send_message(
            message.from_user.id,
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.clear()


@dp.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", Form.admin)
async def send_message_to_subscribers(message: Message, state: FSMContext):
    await bot.send_message(
        message.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:",
        reply_markup=kbd.keyboard_cancel,
    )
    await state.set_state(Form.enter_message)


@dp.message(Form.enter_message)
async def enter_message_to_send(message: Message, state: FSMContext):
    subscribers = db.get_subscriptions()

    for subscriber in subscribers:
        if db.get_status(int(subscriber[1])):
            await bot.send_message(
                int(subscriber[1]),
                message.text
            )

    await bot.send_message(
        message.from_user.id,
        "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await state.clear()


@dp.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", Form.admin)
async def send_message_to_all_users(message: Message, state: FSMContext):
    await bot.send_message(
        message.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=kbd.keyboard_cancel,
    )
    await state.set_state(Form.enter_message_all)


@dp.message(Form.enter_message_all)
async def enter_message_to_send_all(message: Message, state: FSMContext):
    users = db.get_subscriptions()

    for user in users:
        await bot.send_message(
            int(user[1]),
            message.text
        )

    await bot.send_message(
        message.from_user.id,
        "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await state.clear()
